{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#First import libraries\nimport json\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import metrics\n\n#import the json file\nf = '../input/iris-assignment/vertopal.com_algoparams_from_ui.json.json'\nwith open(f, 'r', encoding='utf-8') as f:\n    my_data = json.load(f)\n\n#import the dataset\ndata = pd.read_csv('../input/iris-assignment/iris.csv')\n#print(\"check if there are some missimng values\")\n#print(data.isnull().sum())\n# The data has no misssing value, so we don't need to impute any values \n\nfor element in my_data['design_state_data'][\"algorithms\"]:\n    if my_data['design_state_data'][\"algorithms\"][element]['is_selected'] == True:\n        #print(element)\n        print(\" \")\n\n\n#in the json file it is said that only random forest regressor is selected. \n#So we will work with random forest regressor\n\nle = LabelEncoder()\ndata['species'] = le.fit_transform(data['species'])\ny = data['petal_width']\ndata.drop('petal_width', axis = 1, inplace = True)\n\n\nX = data\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=0)\n\nrf = RandomForestRegressor(max_depth = 25 )\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n\n#print(\"running clear\")\n\n","metadata":{"_uuid":"9a8cac9d-13ce-439e-b158-45fb9372265d","_cell_guid":"380dee12-4925-4811-afc3-751e07de7ab8","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-10-13T14:21:34.622689Z","iopub.execute_input":"2022-10-13T14:21:34.623116Z","iopub.status.idle":"2022-10-13T14:21:34.812275Z","shell.execute_reply.started":"2022-10-13T14:21:34.623082Z","shell.execute_reply":"2022-10-13T14:21:34.810586Z"},"trusted":true},"execution_count":93,"outputs":[{"name":"stdout","text":" \nMean Absolute Error: 0.17365999999999993\nMean Squared Error: 0.05671365696296286\nRoot Mean Squared Error: 0.2381462931959321\n","output_type":"stream"}]}]}